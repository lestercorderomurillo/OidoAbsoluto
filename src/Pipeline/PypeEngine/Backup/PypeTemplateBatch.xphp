<?php

namespace Pipeline\PypeEngine;

use Exception;
use Pipeline\Core\StaticObjectInitializer;
use Pipeline\FileSystem\FileSystem;
use Pipeline\FileSystem\Path\SystemPath;
use Pipeline\FileSystem\Path\Local\DirectoryPath;
use Pipeline\Utilities\ArrayHelper;
use Pipeline\Traits\DefaultAccessorTrait;

class PypeTemplateBatch extends StaticObjectInitializer
{
    use DefaultAccessorTrait;
    private static $templates;

    protected static function __initialize(): void
    {
        $native_components_file_names = FileSystem::find(new DirectoryPath(SystemPath::COMPONENTS));
        $user_components_file_names = FileSystem::find(new DirectoryPath(SystemPath::USERCOMPONENTS));

        $components_to_include = ArrayHelper::stackLines($native_components_file_names, $user_components_file_names);

        self::$templates = [];
        foreach ($components_to_include as $file) {
            $template = require_once($file);
            if (!is_int($template)) {
                self::$templates = self::customKeyMerge($template, self::$templates);
            }
        }
    }

    public static function getComponentsScripts(): string
    {
        $scripts = "";
        foreach (self::$templates as $name => $template) {
            if(isset($template['scripts'])){
                $temporal = str_replace("function ", "function " . $name . "_", $template['scripts']);
                $temporal = str_replace("this.state(", "state(id, ", $temporal);
                $scripts .= str_replace("this.", $name . "_", $temporal);
            }
        }

        if(strlen($scripts) > 0) {
            return "<script type=\"text/javascript\">" . $scripts . "</script>";
        }
        return "";
    }

    public static function getTemplateArray(string $component_name): array
    {
        self::invokeInitialize();
        try {
            return self::$templates[$component_name];
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public static function isRegistered(string $component_name)
    {
        self::invokeInitialize();
        return (isset(self::$templates[$component_name]));
    }

    private static function customKeyMerge(array ...$arrays_to_mix): array
    {
        $result_array = [];
        foreach ($arrays_to_mix as $array) {
            foreach ($array as $key => $value) {
                $result_array["$key"] = $value;
            }
        }
        return $result_array;
    }
}
