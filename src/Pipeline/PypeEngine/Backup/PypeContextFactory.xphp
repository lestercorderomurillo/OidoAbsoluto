<?php

namespace Pipeline\PypeEngine;

use Pipeline\FileSystem\FileSystem;
use Pipeline\FileSystem\Path\Local\DirectoryPath;
use Pipeline\FileSystem\Path\Local\FilePath;
use Pipeline\FileSystem\Path\SystemPath;
use Pipeline\Security\Cryptography;
use Pipeline\Utilities\ArrayHelper;

class PypeContextFactory
{
    private array $packages = [];
    private array $scripts = [];
    private array $styles = [];

    private array $components_scripts = [];

    private string $view_identifier;
    private string $view_timestamp;
    private string $view_script;

    public function __construct(PypeTemplateBatch &$batch, View &$view)
    {
        $this->buildPackagesContext();
        $this->buildStyleContext();
        $this->buildScriptContext();
        $this->buildViewScriptContext($view);
        $this->buildComponentScriptContext($batch);
    }

    public function getContext() : array
    {
        $context = [
            "url" => __URL__,
            "random" => Cryptography::computeRandomKey(8),
            "headers" =>
            [
                [
                    "name" => "timestamp",
                    "content" => $this->view_timestamp
                ],
                [
                    "name" => "page",
                    "content" => $this->view_identifier
                ]
            ],
            "componentsScripts" => $this->components_scripts,
            "scripts" => $this->scripts,
            "script" => $this->view_script,
            "styles" => $this->styles
        ];

        foreach($context as $key => $value){
            $context["view:" . $key] = $value;
            unset($context[$key]);
        }

        return $context;
    }

    private function buildPackagesContext(): void
    {
        $this->packages[] = new FilePath(SystemPath::PACKAGES, "jquery-3.6.0/jquery", "min.js");
        $this->packages[] = new FilePath(SystemPath::PACKAGES, "popper-1.16.1/popper", "min.js");
        $this->packages[] = new FilePath(SystemPath::PACKAGES, "bootstrap-4.6.0/bootstrap", "min.js");
        $this->packages[] = new FilePath(SystemPath::PACKAGES, "observable-slim-0.1.5/observable-slim", "min.js");
        $this->packages[] = new FilePath(SystemPath::PACKAGES, "jquery-validate-1.11.1/jquery.validate", "min.js");
        $this->packages[] = new FilePath(SystemPath::PACKAGES, "canvas-js/canvasjs", "min.js");
    }

    private function buildStyleContext(): void
    {
        $this->styles[] = "https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100&display=swap";
        $this->styles[] = new FilePath(SystemPath::PACKAGES, "bootstrap-4.6.0/bootstrap", "css");
        $this->styles[] = new FilePath(SystemPath::PACKAGES, "font-awesome-4.7.0/font-awesome", "css");
        $this->styles[] = new FilePath(SystemPath::WEB, "build", "css");
        $this->styles = FileSystem::toWebPaths($this->styles);
    }

    private function buildScriptContext(): void
    {
        $paths = FileSystem::findWebPaths(new DirectoryPath(SystemPath::BUILDIN, "Scripts/"), "js");
        $this->scripts = FileSystem::toWebPaths(ArrayHelper::stackLines($this->packages, $paths));
    }

    private function buildViewScriptContext(View &$view): void
    {
        $controller = $view->getControllerName();
        $view_name = $view->getViewName();

        $this->view_identifier = $view->getViewGUID();
        $this->view_timestamp = $view->getTimestamp();
        $this->view_script = (new FilePath(SystemPath::VIEWS, "$controller/$view_name", "js"))->toWebPath()->toString();
        
    }

    private function buildComponentScriptContext(PypeTemplateBatch $batch): void
    {
        
    }

}
